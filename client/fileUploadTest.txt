import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useForm, useController } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useSignupMutation } from '../../features/auth/authApiSlice';
import { toFormData } from '../../utils/object';

const passwordMatches = (val) => {
    const { password, confirmPassword } = val;
    return password === confirmPassword;
};

const avatarSchema = z
    .instanceof(File)
    .refine((file) => ['image/jpeg', 'image/jpg', 'image/png'].includes(file.type), {
        message: 'Only .jpg, .jpeg, and .png files are allowed.',
        path: ['avatar'],
    })
    .refine((file) => file.size <= 5 * 1024 * 1024, {
        message: 'File size should be less than or equal to 5MB.',
        path: ['avatar'],
    });

const schema = z
    .object({
        email: z.string().trim().email('Please enter a valid email address.'),

        firstName: z.string().trim().min(1, 'First name should not be empty.'),
        lastName: z.string().trim().min(1, 'Last name should not be empty.'),
        avatar: avatarSchema,
        password: z
            .string()
            .trim()
            .min(8, 'Password should be at least 8 characters long.')
            .refine(
                (password) => /[A-Z]/.test(password),
                'Password should contain at least one uppercase letter.'
            )
            .refine(
                (password) => /[a-z]/.test(password),
                'Password should contain at least one lowercase letter.'
            )
            .refine(
                (password) => /[0-9]/.test(password),
                'Password should contain at least one number.'
            ),

        confirmPassword: z
            .string()
            .trim()
            .min(8, 'Confirm password should be at least 8 characters long.')
            .refine(
                (password) => /[A-Z]/.test(password),
                'Password should contain at least one uppercase letter.'
            )
            .refine(
                (password) => /[a-z]/.test(password),
                'Password should contain at least one lowercase letter.'
            )
            .refine(
                (password) => /[0-9]/.test(password),
                'Password should contain at least one number.'
            ),
    })
    .refine(passwordMatches, {
        message: 'Password and Confirm Password should be the same.',
        path: ['confirmPassword'],
    });

const Signup = () => {
    const { register, handleSubmit, control, formState, reset } = useForm({
        resolver: zodResolver(schema),
    });

    const {
        field: { ref, value, ...inputProps },
    } = useController({ name: 'avatar', control, defaultValue: '' });

    const { errors } = formState;

    const [signup] = useSignupMutation();
    const navigate = useNavigate();
    const location = useLocation();
    const from = location?.state?.from || '/';

    const toSubmit = async (data, event) => {
        console.log(data);
        const formData = toFormData(data);
        try {
            const result = await signup(formData).unwrap();
            console.log(result);
            event.target.reset();
            navigate(from, { replace: from === '/' ? false : true });
        } catch (error) {
            console.error(error);
        }
    };

    return (
        <main>
            <section className="container mx-auto flex min-h-screen items-center justify-center px-4 py-4">
                <div className="w-full max-w-lg rounded-lg p-8 shadow-xl ring-1 ring-inset ring-secondary-900/5">
                    <h1 className="header-1 text-center">Account Sign Up</h1>
                    <p className="mb-4 text-center font-semibold text-secondary-950">
                        Already have an account?{' '}
                        <Link
                            className="text-accent-500 hover:text-accent-800 focus:outline-none focus:ring-2 focus:ring-accent-500"
                            to="/signin"
                        >
                            Log in.
                        </Link>
                    </p>
                    <form
                        className="flex flex-col space-y-4"
                        onSubmit={handleSubmit(toSubmit)}
                        encType="multipart/form-data"
                    >
                        <div className="flex flex-col gap-4 md:flex-row">
                            <div className="flex-1">
                                <label className="form-label | block" htmlFor="firstName">
                                    First name
                                </label>
                                <input
                                    className="form-control | px-3 py-2"
                                    type="text"
                                    {...register('firstName')}
                                    id="firstName"
                                    placeholder="Your first name"
                                    value="Prince"
                                />
                                <span className="text-xs text-rose-600">
                                    {errors?.firstName?.message}
                                </span>
                            </div>

                            <div className="flex-1">
                                <label className="form-label | block" htmlFor="lastName">
                                    Last name
                                </label>
                                <input
                                    className="form-control | px-3 py-2"
                                    type="text"
                                    {...register('lastName')}
                                    id="lastName"
                                    placeholder="Your last name"
                                    value="Cipriano"
                                />
                                <span className="text-xs text-rose-600">
                                    {errors?.lastName?.message}
                                </span>
                            </div>
                        </div>

                        <div>
                            <label className="form-label | block" htmlFor="avatar">
                                Avatar
                            </label>
                            <input
                                className="form-control | px-3 py-2"
                                type="file"
                                {...inputProps}
                                onChange={(e) => inputProps.onChange(e.target.files[0])}
                                id="avatar"
                                placeholder="Your avatar picture"
                                accept=".jpg,.png,.webp,.jpeg"
                            />
                            <span className="text-xs text-rose-600">{errors?.avatar?.message}</span>
                        </div>

                        <div>
                            <label className="form-label | block" htmlFor="email">
                                Email address
                            </label>
                            <input
                                className="form-control | px-3 py-2"
                                type="email"
                                {...register('email')}
                                id="email"
                                placeholder="Your email address"
                                value="dog@gmail.com"
                            />
                            <span className="text-xs text-rose-600">{errors?.email?.message}</span>
                        </div>

                        <div>
                            <label className="form-label | block" htmlFor="password">
                                Password
                            </label>
                            <input
                                className="form-control | px-3 py-2"
                                type="password"
                                {...register('password')}
                                id="password"
                                placeholder="Create your password"
                                value="Password69"
                            />
                            <span className="text-xs text-rose-600">
                                {errors?.password?.message}
                            </span>
                        </div>

                        <div>
                            <label className="form-label | block" htmlFor="confirmPassword">
                                Confirm password
                            </label>
                            <input
                                className="form-control | px-3 py-2"
                                type="password"
                                {...register('confirmPassword')}
                                id="confirmPassword"
                                placeholder="Confirm your password"
                                value="Password69"
                            />
                            <span className="text-xs text-rose-600">
                                {errors?.confirmPassword?.message}
                            </span>
                        </div>

                        <div>
                            <button
                                className="button | w-full py-4 text-4xl font-bold"
                                type="submit"
                                id="submit"
                            >
                                Create my account
                            </button>
                        </div>

                        <div>
                            <p className="block whitespace-pre-line text-center font-semibold text-secondary-500">
                                By clicking Create Account, you are agreeing to our{' '}
                                <Link
                                    className="text-accent-500 hover:text-accent-800 focus:outline-none focus:ring-2 focus:ring-accent-500"
                                    to="terms"
                                >
                                    Terms & Conditions
                                </Link>{' '}
                                and{' '}
                                <Link
                                    className="text-accent-500 hover:text-accent-800 focus:outline-none focus:ring-2 focus:ring-accent-500"
                                    to="terms"
                                >
                                    Privacy Policy
                                </Link>
                                , and to receive our promotional emails (opt out any time).
                            </p>
                        </div>
                    </form>
                </div>
            </section>
        </main>
    );
};

export default Signup;
